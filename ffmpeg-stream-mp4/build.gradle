apply plugin: 'com.android.application'

android {
    //构建版本
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    signingConfigs {
        config {
            Properties buildProps = loadSignProperties()
            storeFile file(buildProps['STORE_FILE'])
            keyAlias buildProps['KEY_ALIAS']
            keyPassword buildProps['KEY_PASSWORD']
            storePassword buildProps['STORE_PASSWORD']
        }
    }
    buildTypes {
//        debug {
//            buildConfigField "boolean", "ISDEBUG", "true"
//            debuggable true
//            minifyEnabled true
//            shrinkResources true
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//        }
//        release {
//            minifyEnabled true
//            zipAlignEnabled true
//            debuggable true
//            shrinkResources true
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//        }
    }
    //默认的配置
    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        externalNativeBuild {
            ndk {
                ldLibs "rt"
                abiFilters 'armeabi-v7a','arm64-v8a'
            }
            cmake {
                cppFlags "-frtti -fexceptions"
                arguments '-DANDROID_PLATFORM=android-21',
                        '-DANDROID_TOOLCHAIN=clang'
            }
        }

        sourceSets {
            main {
                //库地址
                jniLibs.srcDirs = ['libs']
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile rootProject.ext.dependencies["appcompat-v7"]
    compile rootProject.ext.dependencies["design"]
    compile project(':common')
    compile project(':common-static')
}


/**
 * 读取配置签名
 * @return
 */
def loadSignProperties() {
    Properties buildProperties = new Properties()
    buildProperties.load(new FileInputStream(file("$rootDir/config/sign.properties")))
    return buildProperties
}

